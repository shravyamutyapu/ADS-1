Suppose that a certain BST has keys that are integers between 1 and 10, and we search for 5. Which sequence below cannot be the sequence of keys examined? Why?
a. 10, 9, 8, 7, 6, 5
b. 4, 10, 8, 7, 3, 5
c. 1, 10, 2, 9, 3, 8, 4, 7, 6, 5
d. 2, 7, 3, 8, 4, 5
e. 1, 2, 10, 4, 8, 5

Ans::

A binary search tree need not be balanced. In the simplest case the structure solely depends on insertion order.

For (a), if you insert them in that order (10, 9, 8, 7, 6, 5), you get the following tree, which matches the search order:

10
 \
  9
   \
    8
     \
      7
       \
        6
         \
          5

(b):(4, 10, 8, 7, 3, 5) This indicates a tree that looks like the following, which is valid:

    4
     \
     10
     /
    8
   /
  6
 /
5

(c):(1, 10, 2, 9, 3, 8, 4, 7, 6, 5) - This is also valid. This pattern also valid for the given order of insertion.

  1
   \
   10
   /
  2
   \
    9
   /
  3
   \
    8
   /
  4
   \
    7
   /
  6
 /
5

(d):(2, 7, 3, 8, 4, 5) however, this is wrong order as 8 is out of place. So the search order for 5 according to the given  sequence doesn't occur.The 8 is out of place. When it was inserted, it should have gone to the right of 7, but instead it's to the left, under 3.

2
 \
  7
 /
3
 \
  8
 /
4
 \
  5

(e):(e. 1, 2, 10, 4, 8, 5): is correct sequence for the search of 5.

1
 \
  2
   \
   10
   /
  4
   \
    8
   /
  5